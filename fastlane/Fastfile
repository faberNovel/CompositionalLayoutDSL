skip_docs

# CI

ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "60"

desc "Run all unit tests"
lane :tests do
  scan(
    workspace: "CompositionalLayoutDSL.xcworkspace",
    scheme: "CompositionalLayoutDSLApp",
    derived_data_path: "tests_derived_data",
    clean: true,
    devices: ["iPhone 15"]
  )
end

desc "Run CI check for a commit"
lane :ci_check do
  tests
  danger(
    github_api_token: ENV["GITHUB_API_TOKEN"],
    verbose: true,
    fail_on_errors: true
  )
  pod_lib_lint(
    use_bundle_exec: true,
    allow_warnings: true
  )
end

# Peepare release

desc "Create release branch"
lane :create_release_branch do |options|
  target_version = options[:version]
  raise "The version is missing. Use `fastlane create_release_pr version:{version_number}`.`" if target_version.nil?
  release_branch = "release/v" + target_version
  sh("git", "checkout", "-b", release_branch)
  push_to_git_remote(
    local_branch: release_branch,
    remote_branch: release_branch,
    set_upstream: true
  )
end

desc "Prepare release of a new version"
lane :prepare_release do |options|
  ensure_git_branch(branch: 'release/*')
  ensure_git_status_clean

  bypass_confirmations = options[:bypass_confirmations]
  target_version = target_version_from_branch

  next unless bypass_confirmations ||  UI.confirm("Is your CHANGELOG up to date?")
  bump_version(target_version)
  update_changelog(target_version)

  ensure_git_status_clean

  if bypass_confirmations || UI.confirm("Push?")
      push_to_git_remote
      UI.success "Release preparation pushed"
  end
end

desc "Create release PR"
lane :create_release_pr do
  ensure_git_branch(branch: 'release/*')
  ensure_git_status_clean

  ["main", "develop"].each do |base|
    create_pull_request(
      api_bearer: ENV["GITHUB_TOKEN"],
      repo: ENV["REPO"],
      title: "Release #{target_version_from_branch}",
      base: base
    )
  end
end

# Release

desc "Publish release"
lane :publish_release do
  ensure_git_branch(branch: 'main')

  target_version = version_get_podspec(path: ENV["PODSPEC"])
  changelog = read_changelog(
    changelog_path: ENV["CHANGELOG"],
    section_identifier: "[#{target_version}]"
  )

  set_github_release(
    repository_name: ENV["REPO"],
    api_bearer: ENV["GITHUB_TOKEN"],
    name: "v#{target_version}",
    tag_name: "v#{target_version}",
    description: changelog,
    commitish: "main"
  )

  pod_push(allow_warnings: true)
end

#####################################################
# Private
#####################################################

def update_changelog(target_version)
  changelog_path = ENV["CHANGELOG"]
  stamp_changelog(
    changelog_path: changelog_path,
    section_identifier: "#{target_version}",
    stamp_datetime_format: '%F'
  )

  git_add(path: changelog_path)
  git_commit(
    path: changelog_path,
    message: "Update CHANGELOG"
  )
end

def bump_version(target_version)
  podspec_path = ENV["PODSPEC"]
  version_bump_podspec(
    path: podspec_path,
    version_number: target_version
  )

  pod_install # update the Podfile.lock with the new version

  path = [podspec_path, "Podfile.lock"]
  git_add(path: path)
  git_commit(
    path: path,
    message: "Bump to #{target_version}"
  )
end

def target_version_from_branch
  git_branch.gsub(/release\/[A-Za-z]*/, "")
end

def pod_install
  sh "bundle exec pod install"
end